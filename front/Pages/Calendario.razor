@page "/calendario"
@using Services;
@inject UserService service;
@using BlazorCalendar

<div class="container_selecao">
    <div class="select">
        <ul class="Selecao">
            <li style="--clr: #F9A7EE;"><a href="/Inicio" data-text="&nbsp;Inicio&nbsp;">&nbsp;Inicio&nbsp;</a></li>
            <li style="--clr: #F9A7EE;"><a href="/perfil" data-text="&nbsp;Perfil&nbsp;">&nbsp;Perfil&nbsp;</a></li>
            <li style="--clr: #F9A7EE"><a href="/atividades" data-text="&nbsp;Atividades&nbsp;">&nbsp;Atividades &nbsp; </a></li>
        </ul>
    </div>
</div>
    <h1>Calendario de atividades</h1>
    <select @onchange="LoadCalender">
        @foreach (string MonthNames in monthNames)
        {
            <option>@MonthNames</option>
        }
    </select>
    <table class="tabela_dias">
        <thead>
            <tr>
                @for(var dayIndex = 0; dayIndex < days.Count(); dayIndex++)
                {
                    <th>
                        @days[dayIndex]
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @for(var weekIndex = 0; weekIndex < weeks.Count; weekIndex++)
            {
                <tr>
                    @for(var dayIndex = 0; dayIndex< weeks[weekIndex].Dates.Count(); dayIndex++)
                    {
                        var wIndex = weekIndex;
                        var dIndex = dayIndex;
                        <td class="tabela_calendario">
                            @weeks[weekIndex].Dates[dayIndex].DateValue
                            <br /><br />
                                <label>@weeks[weekIndex].Dates[dayIndex].Note</label>
                            <br /><br />
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
@code{
    List<string> monthNames = new List<string>();
    List<string> days = new List<string>();
    List<WeekClass> weeks = new List<WeekClass>();
    DateTime startDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month,1);
    DateTime endDate = (new DateTime(DateTime.Now.Year, DateTime.Now.Month,1)).AddMonths(1).AddDays(-1);

        protected override void OnInitialized()
        {
            monthNames = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthGenitiveNames.ToList();
            GenerateCalendarHead();
            GenerateCalendarBody();
        }
        private void LoadCalender(ChangeEventArgs e)
        {
            var month = e.Value.ToString();
            int MonthIndex = DateTime.ParseExact(month,"MM",System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR")).Month;
            startDate = new DateTime(DateTime.Now.Year, MonthIndex,1);
            endDate = (new DateTime(DateTime.Now.Year, MonthIndex,1)).AddMonths(1).AddDays(-1);
            GenerateCalendarHead();
            GenerateCalendarBody();
        }
        private void GenerateCalendarHead()
        {
            var day1 = new List<string>();
                for(var dt = startDate;dt<=endDate;dt = dt.AddDays(1))
                {
                    day1.Add(dt.ToString("dddd"));
                }
                days = day1.Distinct().ToList();
        }
        private void GenerateCalendarBody()
        {
            weeks = new List<WeekClass>();
            int flag = 0;
            WeekClass week = new WeekClass();
            List<DayEvent> dates = new List<DayEvent>();
            var totalDays = (int)(endDate - startDate).TotalDays;
            int CountDays = 0;
            for(var dt = startDate;dt<=endDate; dt = dt.AddDays(1))
            {
                flag++;
                dates.Add(new DayEvent()
                {
                    DateValue = dt.ToString("dd-MMMMMM-yyyy"),
                    DayName = dt.ToString("dddd")
                });
                if(flag == 7)
                {
                    week = new WeekClass();
                    week.Dates = dates;
                    weeks.Add(week);
                    
                    dates = new List<DayEvent>();
                    flag  = 0;
                }
                if(CountDays == totalDays)
                {   
                    week = new WeekClass();
                    week.Dates = dates;
                    weeks.Add(week);
                    break;

                }
                CountDays++;
            }    
        }
}

